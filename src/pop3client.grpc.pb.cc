// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pop3client.proto

#include "pop3client.pb.h"
#include "pop3client.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MailService_method_names[] = {
  "/MailService/GetMailList",
  "/MailService/GetMailPreviews",
  "/MailService/UpdateMailList",
};

std::unique_ptr< MailService::Stub> MailService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MailService::Stub> stub(new MailService::Stub(channel));
  return stub;
}

MailService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMailList_(MailService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMailPreviews_(MailService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMailList_(MailService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MailService::Stub::GetMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::MailList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::MailList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMailList_, context, request, response);
}

void MailService::Stub::experimental_async::GetMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::MailList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::MailList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMailList_, context, request, response, std::move(f));
}

void MailService::Stub::experimental_async::GetMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::MailList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMailList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailList>* MailService::Stub::PrepareAsyncGetMailListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MailList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMailList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MailList>* MailService::Stub::AsyncGetMailListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMailListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MailService::Stub::GetMailPreviews(::grpc::ClientContext* context, const ::MailPreviewRequest& request, ::MailPreviewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MailPreviewRequest, ::MailPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMailPreviews_, context, request, response);
}

void MailService::Stub::experimental_async::GetMailPreviews(::grpc::ClientContext* context, const ::MailPreviewRequest* request, ::MailPreviewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MailPreviewRequest, ::MailPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMailPreviews_, context, request, response, std::move(f));
}

void MailService::Stub::experimental_async::GetMailPreviews(::grpc::ClientContext* context, const ::MailPreviewRequest* request, ::MailPreviewResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMailPreviews_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailPreviewResponse>* MailService::Stub::PrepareAsyncGetMailPreviewsRaw(::grpc::ClientContext* context, const ::MailPreviewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MailPreviewResponse, ::MailPreviewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMailPreviews_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MailPreviewResponse>* MailService::Stub::AsyncGetMailPreviewsRaw(::grpc::ClientContext* context, const ::MailPreviewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMailPreviewsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MailService::Stub::UpdateMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMailList_, context, request, response);
}

void MailService::Stub::experimental_async::UpdateMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMailList_, context, request, response, std::move(f));
}

void MailService::Stub::experimental_async::UpdateMailList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMailList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MailService::Stub::PrepareAsyncUpdateMailListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMailList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MailService::Stub::AsyncUpdateMailListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMailListRaw(context, request, cq);
  result->StartCall();
  return result;
}

MailService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MailService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MailService::Service, ::google::protobuf::Empty, ::MailList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MailService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::MailList* resp) {
               return service->GetMailList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MailService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MailService::Service, ::MailPreviewRequest, ::MailPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MailService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailPreviewRequest* req,
             ::MailPreviewResponse* resp) {
               return service->GetMailPreviews(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MailService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MailService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MailService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateMailList(ctx, req, resp);
             }, this)));
}

MailService::Service::~Service() {
}

::grpc::Status MailService::Service::GetMailList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::MailList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MailService::Service::GetMailPreviews(::grpc::ServerContext* context, const ::MailPreviewRequest* request, ::MailPreviewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MailService::Service::UpdateMailList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


