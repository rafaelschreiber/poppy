// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pop3client.proto

#include "pop3client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MailPreview_HeaderEntry_DoNotUse::MailPreview_HeaderEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MailPreview_HeaderEntry_DoNotUseDefaultTypeInternal {
  constexpr MailPreview_HeaderEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailPreview_HeaderEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MailPreview_HeaderEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailPreview_HeaderEntry_DoNotUseDefaultTypeInternal _MailPreview_HeaderEntry_DoNotUse_default_instance_;
constexpr MailPreview::MailPreview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , uidl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mailid_(0u)
  , size_(0u){}
struct MailPreviewDefaultTypeInternal {
  constexpr MailPreviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailPreviewDefaultTypeInternal() {}
  union {
    MailPreview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailPreviewDefaultTypeInternal _MailPreview_default_instance_;
constexpr MailList::MailList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : length_(0u)
  , size_(0u){}
struct MailListDefaultTypeInternal {
  constexpr MailListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailListDefaultTypeInternal() {}
  union {
    MailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailListDefaultTypeInternal _MailList_default_instance_;
constexpr MailPreviewRequest::MailPreviewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct MailPreviewRequestDefaultTypeInternal {
  constexpr MailPreviewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailPreviewRequestDefaultTypeInternal() {}
  union {
    MailPreviewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailPreviewRequestDefaultTypeInternal _MailPreviewRequest_default_instance_;
constexpr MailPreviewResponse::MailPreviewResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_previews_(){}
struct MailPreviewResponseDefaultTypeInternal {
  constexpr MailPreviewResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailPreviewResponseDefaultTypeInternal() {}
  union {
    MailPreviewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailPreviewResponseDefaultTypeInternal _MailPreviewResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pop3client_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pop3client_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pop3client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pop3client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MailPreview_HeaderEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MailPreview_HeaderEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailPreview_HeaderEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MailPreview_HeaderEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailPreview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailPreview, mailid_),
  PROTOBUF_FIELD_OFFSET(::MailPreview, size_),
  PROTOBUF_FIELD_OFFSET(::MailPreview, uidl_),
  PROTOBUF_FIELD_OFFSET(::MailPreview, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailList, length_),
  PROTOBUF_FIELD_OFFSET(::MailList, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailPreviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailPreviewRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailPreviewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailPreviewResponse, mail_previews_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::MailPreview_HeaderEntry_DoNotUse)},
  { 9, -1, sizeof(::MailPreview)},
  { 18, -1, sizeof(::MailList)},
  { 25, -1, sizeof(::MailPreviewRequest)},
  { 31, -1, sizeof(::MailPreviewResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MailPreview_HeaderEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MailPreview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MailList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MailPreviewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MailPreviewResponse_default_instance_),
};

const char descriptor_table_protodef_pop3client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pop3client.proto\032\033google/protobuf/empt"
  "y.proto\"\222\001\n\013MailPreview\022\016\n\006mailid\030\001 \001(\r\022"
  "\014\n\004size\030\002 \001(\r\022\014\n\004uidl\030\003 \001(\t\022(\n\006header\030\004 "
  "\003(\0132\030.MailPreview.HeaderEntry\032-\n\013HeaderE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"(\n\010"
  "MailList\022\016\n\006length\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\" "
  "\n\022MailPreviewRequest\022\n\n\002id\030\001 \001(\r\":\n\023Mail"
  "PreviewResponse\022#\n\rmail_previews\030\001 \003(\0132\014"
  ".MailPreview2\201\001\n\013MailService\0222\n\013GetMailL"
  "ist\022\026.google.protobuf.Empty\032\t.MailList\"\000"
  "\022>\n\017GetMailPreviews\022\023.MailPreviewRequest"
  "\032\024.MailPreviewResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pop3client_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pop3client_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pop3client_2eproto = {
  false, false, 472, descriptor_table_protodef_pop3client_2eproto, "pop3client.proto", 
  &descriptor_table_pop3client_2eproto_once, descriptor_table_pop3client_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_pop3client_2eproto::offsets,
  file_level_metadata_pop3client_2eproto, file_level_enum_descriptors_pop3client_2eproto, file_level_service_descriptors_pop3client_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_pop3client_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pop3client_2eproto);
  return descriptor_table_pop3client_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pop3client_2eproto(&descriptor_table_pop3client_2eproto);

// ===================================================================

MailPreview_HeaderEntry_DoNotUse::MailPreview_HeaderEntry_DoNotUse() {}
MailPreview_HeaderEntry_DoNotUse::MailPreview_HeaderEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MailPreview_HeaderEntry_DoNotUse::MergeFrom(const MailPreview_HeaderEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MailPreview_HeaderEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MailPreview_HeaderEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MailPreview::_Internal {
 public:
};

MailPreview::MailPreview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  header_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailPreview)
}
MailPreview::MailPreview(const MailPreview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.MergeFrom(from.header_);
  uidl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uidl().empty()) {
    uidl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uidl(), 
      GetArena());
  }
  ::memcpy(&mailid_, &from.mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&mailid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:MailPreview)
}

void MailPreview::SharedCtor() {
uidl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mailid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&mailid_)) + sizeof(size_));
}

MailPreview::~MailPreview() {
  // @@protoc_insertion_point(destructor:MailPreview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailPreview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uidl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailPreview::ArenaDtor(void* object) {
  MailPreview* _this = reinterpret_cast< MailPreview* >(object);
  (void)_this;
}
void MailPreview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailPreview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailPreview::Clear() {
// @@protoc_insertion_point(message_clear_start:MailPreview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_.Clear();
  uidl_.ClearToEmpty();
  ::memset(&mailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&mailid_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailPreview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uidl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uidl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailPreview.uidl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&header_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailPreview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailPreview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mailid = 1;
  if (this->mailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mailid(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // string uidl = 3;
  if (this->uidl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uidl().data(), static_cast<int>(this->_internal_uidl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailPreview.uidl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uidl(), target);
  }

  // map<string, string> header = 4;
  if (!this->_internal_header().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MailPreview.HeaderEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MailPreview.HeaderEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_header().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_header().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_header().begin();
          it != this->_internal_header().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MailPreview_HeaderEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_header().begin();
          it != this->_internal_header().end(); ++it) {
        target = MailPreview_HeaderEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailPreview)
  return target;
}

size_t MailPreview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailPreview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> header = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_header_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_header().begin();
      it != this->_internal_header().end(); ++it) {
    total_size += MailPreview_HeaderEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string uidl = 3;
  if (this->uidl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uidl());
  }

  // uint32 mailid = 1;
  if (this->mailid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mailid());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailPreview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailPreview)
  GOOGLE_DCHECK_NE(&from, this);
  const MailPreview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailPreview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailPreview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailPreview)
    MergeFrom(*source);
  }
}

void MailPreview::MergeFrom(const MailPreview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailPreview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_.MergeFrom(from.header_);
  if (from.uidl().size() > 0) {
    _internal_set_uidl(from._internal_uidl());
  }
  if (from.mailid() != 0) {
    _internal_set_mailid(from._internal_mailid());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void MailPreview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailPreview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailPreview::CopyFrom(const MailPreview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailPreview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailPreview::IsInitialized() const {
  return true;
}

void MailPreview::InternalSwap(MailPreview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  header_.Swap(&other->header_);
  uidl_.Swap(&other->uidl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailPreview, size_)
      + sizeof(MailPreview::size_)
      - PROTOBUF_FIELD_OFFSET(MailPreview, mailid_)>(
          reinterpret_cast<char*>(&mailid_),
          reinterpret_cast<char*>(&other->mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailPreview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MailList::_Internal {
 public:
};

MailList::MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailList)
}
MailList::MailList(const MailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&length_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:MailList)
}

void MailList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&length_)) + sizeof(size_));
}

MailList::~MailList() {
  // @@protoc_insertion_point(destructor:MailList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MailList::ArenaDtor(void* object) {
  MailList* _this = reinterpret_cast< MailList* >(object);
  (void)_this;
}
void MailList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailList::Clear() {
// @@protoc_insertion_point(message_clear_start:MailList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&length_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_length(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailList)
  return target;
}

size_t MailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailList)
  GOOGLE_DCHECK_NE(&from, this);
  const MailList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailList)
    MergeFrom(*source);
  }
}

void MailList::MergeFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void MailList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailList::CopyFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailList::IsInitialized() const {
  return true;
}

void MailList::InternalSwap(MailList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailList, size_)
      + sizeof(MailList::size_)
      - PROTOBUF_FIELD_OFFSET(MailList, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MailPreviewRequest::_Internal {
 public:
};

MailPreviewRequest::MailPreviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailPreviewRequest)
}
MailPreviewRequest::MailPreviewRequest(const MailPreviewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MailPreviewRequest)
}

void MailPreviewRequest::SharedCtor() {
id_ = 0u;
}

MailPreviewRequest::~MailPreviewRequest() {
  // @@protoc_insertion_point(destructor:MailPreviewRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailPreviewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MailPreviewRequest::ArenaDtor(void* object) {
  MailPreviewRequest* _this = reinterpret_cast< MailPreviewRequest* >(object);
  (void)_this;
}
void MailPreviewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailPreviewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailPreviewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailPreviewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailPreviewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailPreviewRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailPreviewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailPreviewRequest)
  return target;
}

size_t MailPreviewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailPreviewRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailPreviewRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MailPreviewRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailPreviewRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailPreviewRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailPreviewRequest)
    MergeFrom(*source);
  }
}

void MailPreviewRequest::MergeFrom(const MailPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MailPreviewRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailPreviewRequest::CopyFrom(const MailPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailPreviewRequest::IsInitialized() const {
  return true;
}

void MailPreviewRequest::InternalSwap(MailPreviewRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailPreviewRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MailPreviewResponse::_Internal {
 public:
};

MailPreviewResponse::MailPreviewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mail_previews_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailPreviewResponse)
}
MailPreviewResponse::MailPreviewResponse(const MailPreviewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mail_previews_(from.mail_previews_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MailPreviewResponse)
}

void MailPreviewResponse::SharedCtor() {
}

MailPreviewResponse::~MailPreviewResponse() {
  // @@protoc_insertion_point(destructor:MailPreviewResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailPreviewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MailPreviewResponse::ArenaDtor(void* object) {
  MailPreviewResponse* _this = reinterpret_cast< MailPreviewResponse* >(object);
  (void)_this;
}
void MailPreviewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailPreviewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailPreviewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailPreviewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_previews_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailPreviewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MailPreview mail_previews = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mail_previews(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailPreviewResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailPreviewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailPreview mail_previews = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mail_previews_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mail_previews(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailPreviewResponse)
  return target;
}

size_t MailPreviewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailPreviewResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MailPreview mail_previews = 1;
  total_size += 1UL * this->_internal_mail_previews_size();
  for (const auto& msg : this->mail_previews_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailPreviewResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailPreviewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MailPreviewResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailPreviewResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailPreviewResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailPreviewResponse)
    MergeFrom(*source);
  }
}

void MailPreviewResponse::MergeFrom(const MailPreviewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailPreviewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mail_previews_.MergeFrom(from.mail_previews_);
}

void MailPreviewResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailPreviewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailPreviewResponse::CopyFrom(const MailPreviewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailPreviewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailPreviewResponse::IsInitialized() const {
  return true;
}

void MailPreviewResponse::InternalSwap(MailPreviewResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mail_previews_.InternalSwap(&other->mail_previews_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailPreviewResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailPreview_HeaderEntry_DoNotUse* Arena::CreateMaybeMessage< ::MailPreview_HeaderEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailPreview_HeaderEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailPreview* Arena::CreateMaybeMessage< ::MailPreview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailPreview >(arena);
}
template<> PROTOBUF_NOINLINE ::MailList* Arena::CreateMaybeMessage< ::MailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailList >(arena);
}
template<> PROTOBUF_NOINLINE ::MailPreviewRequest* Arena::CreateMaybeMessage< ::MailPreviewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailPreviewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailPreviewResponse* Arena::CreateMaybeMessage< ::MailPreviewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailPreviewResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
